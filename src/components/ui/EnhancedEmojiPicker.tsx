import React, { useState, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Search, X, Smile, Briefcase, Star } from "lucide-react";

// Erweiterte Emoji-Datenbank direkt in der Komponente f√ºr bessere Stabilit√§t
const EMOJI_CATEGORIES = {
  frequent: {
    name: "H√§ufig",
    icon: "‚≠ê",
    emojis: [
      "üìã",
      "‚úÖ",
      "‚≠ê",
      "üî•",
      "üí°",
      "üéØ",
      "üöÄ",
      "üíº",
      "üìà",
      "üèÜ",
      "üëç",
      "üí™",
      "üåü",
      "‚ú®",
      "üéâ",
    ],
  },
  work: {
    name: "Arbeit",
    icon: "üíº",
    emojis: [
      "üíº",
      "üìä",
      "üìà",
      "üìâ",
      "üìã",
      "üìù",
      "‚úèÔ∏è",
      "üìé",
      "üìå",
      "üìÅ",
      "üìÑ",
      "üìÉ",
      "üíª",
      "‚å®Ô∏è",
      "üñ•Ô∏è",
      "üìû",
      "üìß",
      "üìÆ",
      "üí™",
      "üèÜ",
    ],
  },
  success: {
    name: "Erfolg",
    icon: "üèÜ",
    emojis: [
      "üèÜ",
      "ü•á",
      "ü•à",
      "ü•â",
      "üéñÔ∏è",
      "üèÖ",
      "‚≠ê",
      "‚ú®",
      "üí´",
      "üåü",
      "üî•",
      "üí™",
      "üëç",
      "üëè",
      "üôå",
      "‚úÖ",
      "‚òëÔ∏è",
      "‚úîÔ∏è",
      "üíØ",
      "üéØ",
    ],
  },
  arrows: {
    name: "Pfeile",
    icon: "‚û°Ô∏è",
    emojis: [
      "‚û°Ô∏è",
      "‚¨ÖÔ∏è",
      "‚¨ÜÔ∏è",
      "‚¨áÔ∏è",
      "‚ÜóÔ∏è",
      "‚ÜòÔ∏è",
      "‚ÜôÔ∏è",
      "‚ÜñÔ∏è",
      "‚ÜïÔ∏è",
      "‚ÜîÔ∏è",
      "üîÑ",
      "üîÉ",
      "üîÅ",
      "üîÇ",
      "‚ñ∂Ô∏è",
      "‚è∏Ô∏è",
      "‚èπÔ∏è",
      "‚è∫Ô∏è",
      "‚è≠Ô∏è",
      "‚èÆÔ∏è",
    ],
  },
  numbers: {
    name: "Zahlen",
    icon: "1Ô∏è‚É£",
    emojis: [
      "1Ô∏è‚É£",
      "2Ô∏è‚É£",
      "3ÔøΩÔøΩÔøΩ‚É£",
      "4Ô∏è‚É£",
      "5Ô∏è‚É£",
      "6Ô∏è‚É£",
      "7Ô∏è‚É£",
      "8Ô∏è‚É£",
      "9Ô∏è‚É£",
      "üîü",
      "#Ô∏è‚É£",
      "*Ô∏è‚É£",
      "0Ô∏è‚É£",
    ],
  },
  symbols: {
    name: "Symbole",
    icon: "üí°",
    emojis: [
      "üí°",
      "üîç",
      "üîé",
      "‚ùì",
      "‚ùó",
      "‚ùï",
      "‚ùî",
      "‚ÄºÔ∏è",
      "‚ÅâÔ∏è",
      "üí≠",
      "üí¨",
      "üó®Ô∏è",
      "üóØÔ∏è",
      "üîî",
      "üîï",
      "üì£",
      "üì¢",
      "üîä",
      "üîâ",
      "üîà",
    ],
  },
};

// Erweiterte Suchfunktion
const SEARCH_KEYWORDS = {
  arbeit: ["üíº", "üë®‚Äçüíº", "üë©‚Äçüíº", "üè¢", "üìä", "üìà", "üìã", "üìù"],
  work: ["üíº", "üë®‚Äçüíº", "üë©‚Äçüíº", "üè¢", "üìä", "üìà", "üìã", "üìù"],
  erfolg: ["üèÜ", "‚≠ê", "ü•á", "üí™", "üéØ", "‚úÖ", "üåü"],
  success: ["üèÜ", "‚≠ê", "ü•á", "üí™", "üéØ", "‚úÖ", "üåü"],
  zeit: ["‚è∞", "üìÖ", "‚è±Ô∏è", "üïê", "‚è≥"],
  time: ["‚è∞", "üìÖ", "‚è±Ô∏è", "üïê", "‚è≥"],
  team: ["üë•", "ü§ù", "üë®‚Äçüíº", "üë©‚Äçüíº", "üë´"],
  ziel: ["üéØ", "üèπ", "üîÆ", "üöÄ", "‚≠ê"],
  goal: ["üéØ", "üèπ", "üîÆ", "üöÄ", "‚≠ê"],
  idee: ["üí°", "üß†", "üí≠", "‚ú®", "üåü"],
  idea: ["üí°", "üß†", "üí≠", "‚ú®", "üåü"],
  qualit√§t: ["‚≠ê", "üíé", "üèÜ", "‚ú®", "üëå"],
  quality: ["‚≠ê", "üíé", "üèÜ", "‚ú®", "üëå"],
};

interface EnhancedEmojiPickerProps {
  isOpen: boolean;
  onClose: () => void;
  onEmojiSelect: (emoji: string) => void;
  currentEmoji?: string;
}

export const EnhancedEmojiPicker: React.FC<EnhancedEmojiPickerProps> = ({
  isOpen,
  onClose,
  onEmojiSelect,
  currentEmoji = "",
}) => {
  const [searchQuery, setSearchQuery] = useState("");
  const [activeTab, setActiveTab] = useState("frequent");

  const handleEmojiClick = (emoji: string) => {
    onEmojiSelect(emoji);
    onClose();
  };

  const handleClearEmoji = () => {
    onEmojiSelect("");
    onClose();
  };

  // Memoized search results f√ºr bessere Performance
  const searchResults = useMemo(() => {
    if (!searchQuery.trim()) return [];

    const query = searchQuery.toLowerCase();

    // Direkte Keyword-Suche
    for (const [keyword, emojis] of Object.entries(SEARCH_KEYWORDS)) {
      if (keyword.includes(query) || query.includes(keyword)) {
        return emojis;
      }
    }

    // Fallback: Suche in allen Emojis
    const allEmojis = Object.values(EMOJI_CATEGORIES).flatMap(
      (cat) => cat.emojis,
    );
    return allEmojis.slice(0, 20); // Limit f√ºr Performance
  }, [searchQuery]);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md max-h-[80vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Smile className="w-5 h-5" />
            Emoji ausw√§hlen
            {currentEmoji && (
              <span className="text-lg bg-gray-100 px-2 py-1 rounded">
                {currentEmoji}
              </span>
            )}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          {/* Quick Actions */}
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={handleClearEmoji}
              className="flex items-center gap-2"
            >
              <X className="w-4 h-4" />
              Kein Emoji
            </Button>
            {currentEmoji && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleEmojiClick(currentEmoji)}
                className="flex items-center gap-2"
              >
                {currentEmoji} Behalten
              </Button>
            )}
          </div>

          {/* Search Input */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              placeholder="Emojis suchen... (z.B. arbeit, erfolg, zeit)"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Search Results or Categories */}
          {searchQuery ? (
            <div className="space-y-2">
              <Label className="text-sm font-medium">
                Suchergebnisse f√ºr "{searchQuery}"
              </Label>
              <div className="grid grid-cols-8 gap-2 p-3 border rounded-lg max-h-48 overflow-y-auto bg-gray-50">
                {searchResults.length > 0 ? (
                  searchResults.map((emoji, index) => (
                    <Button
                      key={`${emoji}-${index}`}
                      variant="ghost"
                      size="sm"
                      className="h-10 w-10 p-0 text-lg hover:bg-blue-100 hover:scale-110 transition-all"
                      onClick={() => handleEmojiClick(emoji)}
                    >
                      {emoji}
                    </Button>
                  ))
                ) : (
                  <div className="col-span-8 text-center text-gray-500 py-4">
                    Keine Emojis gefunden
                  </div>
                )}
              </div>
            </div>
          ) : (
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            >
              <TabsList className="grid w-full grid-cols-3 text-xs">
                <TabsTrigger value="frequent" className="text-xs">
                  ‚≠ê H√§ufig
                </TabsTrigger>
                <TabsTrigger value="work" className="text-xs">
                  üíº Arbeit
                </TabsTrigger>
                <TabsTrigger value="all" className="text-xs">
                  üéØ Alle
                </TabsTrigger>
              </TabsList>

              <TabsContent value="frequent" className="mt-4">
                <div className="grid grid-cols-8 gap-2 p-3 border rounded-lg max-h-48 overflow-y-auto bg-gray-50">
                  {EMOJI_CATEGORIES.frequent.emojis.map((emoji, index) => (
                    <Button
                      key={`frequent-${emoji}-${index}`}
                      variant="ghost"
                      size="sm"
                      className="h-10 w-10 p-0 text-lg hover:bg-blue-100 hover:scale-110 transition-all"
                      onClick={() => handleEmojiClick(emoji)}
                    >
                      {emoji}
                    </Button>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="work" className="mt-4">
                <div className="max-h-64 overflow-y-auto space-y-3">
                  {Object.entries(EMOJI_CATEGORIES)
                    .filter(([key]) =>
                      ["work", "success", "arrows"].includes(key),
                    )
                    .map(([key, category]) => (
                      <div key={key} className="space-y-2">
                        <Label className="text-xs font-medium text-gray-600 flex items-center gap-1">
                          {category.icon} {category.name}
                        </Label>
                        <div className="grid grid-cols-8 gap-2 p-2 border rounded-lg bg-gray-50">
                          {category.emojis.map((emoji, index) => (
                            <Button
                              key={`${key}-${emoji}-${index}`}
                              variant="ghost"
                              size="sm"
                              className="h-8 w-8 p-0 text-sm hover:bg-blue-100 hover:scale-110 transition-all"
                              onClick={() => handleEmojiClick(emoji)}
                            >
                              {emoji}
                            </Button>
                          ))}
                        </div>
                      </div>
                    ))}
                </div>
              </TabsContent>

              <TabsContent value="all" className="mt-4">
                <div className="max-h-64 overflow-y-auto space-y-3">
                  {Object.entries(EMOJI_CATEGORIES).map(([key, category]) => (
                    <div key={key} className="space-y-2">
                      <Label className="text-xs font-medium text-gray-600 flex items-center gap-1">
                        {category.icon} {category.name}
                      </Label>
                      <div className="grid grid-cols-8 gap-2 p-2 border rounded-lg bg-gray-50">
                        {category.emojis.map((emoji, index) => (
                          <Button
                            key={`${key}-${emoji}-${index}`}
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 text-sm hover:bg-blue-100 hover:scale-110 transition-all"
                            onClick={() => handleEmojiClick(emoji)}
                          >
                            {emoji}
                          </Button>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </TabsContent>
            </Tabs>
          )}

          {/* Pro-Tip */}
          <div className="bg-blue-50 p-3 rounded-lg">
            <p className="text-xs text-blue-700">
              üí° <strong>Pro-Tipp:</strong> Versuchen Sie Suchbegriffe wie
              "arbeit", "erfolg", "zeit", "team" f√ºr passende Emojis!
            </p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
